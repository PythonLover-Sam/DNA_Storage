import Functions.Strand as Strand
import Functions.Encoding as Encoding

UFP = "TTTCCCTACGCCTCTCAAAG"
URP = "GGCTCGAGGAAATGTTGTTG"

FPs = ['GAAGGTCTGTCATGGTTCTG', 'TGGGACTGATGTGGACTGCC', 'GGTCATAGCCTCATCCAGCG']
RPs = ['TTGGCACTGAATCACGCGTC', 'AGTTCTAACGGCAGGATAGT', 'TTTTTAATCCCCTCCATCCG']

meta_sequences = [
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGGAAGGTCTGTCATGGTTCTGCATACTCCCTGACTGACTGGATAACCCGCTGGCGATCTGACTCAATACATACATACATACTACTATCCTGCCGTTAGAACTGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGGAAGGTCTGTCATGGTTCTGCATCATAACAGACTGGCGCTCTCCATAACCCACATTCCCCATTACCGTATAACCGTATTCTCGGATGGAGGGGATTAAAAAGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGGAAGGTCTGTCATGGTTCTGCGCCCTGTCTAGCTGGCGAACGTCCGATCTTCCTCGCTTACGCACTACCTATCTGACTCCCGACGCGTGATTCAGTGCCAAACTATCCTGCCGTTAGAACTCAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGTGGGACTGATGTGGACTGCCCTACCTATCTTCCTGGCTCGCTCCCTGTCTCCCGCACTTCCTAGCTACCTGACTGACGTCCGACGCGTGATTCAGTGCCAAGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGTGGGACTGATGTGGACTGCCCTACCTATCTGGCGATCTTCCTCGCTTCCTGTCTACCTGACTTCCGCACTTCCTCCCGAGCACTATCCTGCCGTTAGAACTGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGTGGGACTGATGTGGACTGCCCTACCTATCGAGCTGGCGATCTATCTACCTATCTTCCTGACTTCCGCACTTCCTCCCGAGTCGGATGGAGGGGATTAAAAAGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGTGGGACTGATGTGGACTGCCCTGGCGCTCTCCCGATCGATCTCCCTCTCTTCCTGTCTCCCTGCCTCCCTGTCGCACGAGTACTATCCTGCCGTTAGAACTACTATCCTGCCGTTAGAACTCAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGTGGGACTGATGTGGACTGCCCTTCCTGTCGCACTCCCGATCTGTCTACCGCACTTCCTGGCTGTCTACCTGACTGACGTCCACTATCCTGCCGTTAGAACTCGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGGGTCATAGCCTCATCCAGCGCTTTCGCCCGATCTTCCGAGCGAACGATCGCCCTCACTCCCTGTCGCACTTCCTACCTGATACTATCCTGCCGTTAGAACTGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGAAGGTCTGTCATGGTTCTGGGTCATAGCCTCATCCAGCGCTTCCTGTCGCACTCCCGATCTTCCTGGCGATCTTCCGTTCTACCGCACTTCCTGGCTGTCACTATCCTGCCGTTAGAACTACTATCCTGCCGTTAGAACTCAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGTGGGACTGATGTGGACTGCCGAAGGTCTGTCATGGTTCTGCTGACTTCCTCGCTTACGCACGAGCTGGCTGCCTCCCTGTCTCCCGAGCGAGCTCCCGAGCGACGCGTGATTCAGTGCCAAGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGTGGGACTGATGTGGACTGCCGAAGGTCTGTCATGGTTCTGCGCCCTGTCTTCCTGCCTACCTCGCTTCCTGTCTACCGCACTTCCGCTCTCCCTGACGTCTGACGCGTGATTCAGTGCCAACGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGTGGGACTGATGTGGACTGCCGAAGGTCTGTCATGGTTCTGCTACCTGACTTGCTACCTGACTTCCTGTCTTCCGTTCTACCGCACTTCCTGGCTGTCGAGCACTATCCTGCCGTTAGAACTCGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGTGGGACTGATGTGGACTGCCGAAGGTCTGTCATGGTTCTGCTCACTCCCTGTCTACCGCACTTCCTGGCTGTCTACCTGACTTCCGTTCTTCCTGTCTCGCCGGATGGAGGGGATTAAAAACGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGTGGGACTGATGTGGACTGCCTGGGACTGATGTGGACTGCCCTTCCTGTCGCACGATCTACCGAACGATCTCCCTGTCTCCCGCCCGATCTTCCTACCTGACGACGCGTGATTCAGTGCCAACGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGGTCATAGCCTCATCCAGCGGAAGGTCTGTCATGGTTCTGCTCGCTCCCTGTCGCACTGACTCCCTGCCTACCTGTCTGACTTCCTGTCTCCCGAGCGAGCACTATCCTGCCGTTAGAACTGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGGTCATAGCCTCATCCAGCGTGGGACTGATGTGGACTGCCCGCCCTGTCGATCTCCCTGACTTCCTACCTATCTTCCTGACTTCCGCACTTCCTCCCGAGTACTATCCTGCCGTTAGAACTGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGGTCATAGCCTCATCCAGCGTGGGACTGATGTGGACTGCCCTCACTTCCGAGCTACCGAACGAACTGGCTTCCTGTCGCACTTCCTGTCTCGCTGACGTCTCGGATGGAGGGGATTAAAAAACTATCCTGCCGTTAGAACTCAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGGTCATAGCCTCATCCAGCGTGGGACTGATGTGGACTGCCCTCACTTCCGAGCTTCCTGTCGCACTCCCGATCTCCCGAGCGCACTCCCTCACTGACGTCCGACGCGTGATTCAGTGCCAACGGATGGAGGGGATTAAAAACAACAACATTTCCTCGAGCCATC',
    'ATCTTTCCCTACGCCTCTCAAAGGGTCATAGCCTCATCCAGCGGGTCATAGCCTCATCCAGCGCGAACGATCTGGCTGACTCCCGCACTACCGATCTTCCTACCTGTCTTCCGAGCTCCCTCACCGGATGGAGGGGATTAAAAAGACGCGTGATTCAGTGCCAACAACAACATTTCCTCGAGCCATC'
]

analysis_sequences = []

for i in range(len(meta_sequences)):
    seq_datas = []
    meta_seq = meta_sequences[i]
    core_seq = meta_seq[3:-3]
    cmpl_seq = Strand.get_complement_strand(core_seq)
    ufp = core_seq[:20]
    up1 = core_seq[20:40]
    up2 = core_seq[40:60]
    seq_datas.append([ufp, up1, up2])

    payload = core_seq[60:-60]
    print(payload)

    result = Encoding.decode_dna_seq_to_string(payload)
    seq_datas.append([payload, result])

    urp = cmpl_seq[:20]
    rp1 = cmpl_seq[20:40]
    rp2 = cmpl_seq[40:60]
    seq_datas.append([urp, rp1, rp2])
    analysis_sequences.append(seq_datas)

print(analysis_sequences)

experiment_infos = []

fps_name = ["FP1", "FP2", "FP3"]
rps_name = ["RP1", "RP2", "RP3"]

for info in analysis_sequences:
    result = ''
    result += fps_name[FPs.index(info[0][1])] + '-'
    result += fps_name[FPs.index(info[0][2])] + '-'
    result += info[1][1] + '-'
    result += rps_name[RPs.index(info[2][2])] + '-'
    result += rps_name[RPs.index(info[2][1])]
    # result += 'URP'

    experiment_infos.append(result)
    print(result)

